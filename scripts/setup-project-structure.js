#!/usr/bin/env node

/**
 * T001: Project Structure Setup Script
 * 
 * Direct Node.js script to create the project structure for remote installation system.
 */

const fs = require('fs');
const path = require('path');

class ProjectStructureSetup {
  constructor(projectRoot = process.cwd()) {
    this.projectRoot = projectRoot;
  }

  async setupProjectStructure() {
    try {
      console.log('🚀 Starting project structure setup (T001)...');
      
      // Create main directories
      await this.createMainDirectories();
      
      // Create module files
      await this.createModuleFiles();
      
      // Create utility files
      await this.createUtilityFiles();
      
      // Create install scripts
      await this.createInstallScripts();
      
      console.log('✅ Project structure setup completed successfully');
      console.log('📁 Created directories:');
      console.log('   - scripts/install/');
      console.log('   - scripts/modules/');
      console.log('   - scripts/modules/package-managers/');
      console.log('   - scripts/utils/');
      console.log('   - tests/install/');
      console.log('   - docs/install/');
      console.log('');
      console.log('📄 Created placeholder files for all modules and utilities');
      console.log('🔧 All scripts have executable permissions');
      
    } catch (error) {
      console.error('❌ Failed to setup project structure:', error);
      throw error;
    }
  }

  async createMainDirectories() {
    const directories = [
      'scripts/install',
      'scripts/modules',
      'scripts/modules/package-managers',
      'scripts/utils',
      'tests/install',
      'docs/install'
    ];

    for (const dir of directories) {
      const fullPath = path.join(this.projectRoot, dir);
      await this.ensureDirectoryExists(fullPath);
    }
  }

  async createModuleFiles() {
    const modulesDir = path.join(this.projectRoot, 'scripts/modules');
    
    const coreModules = [
      'system-detector.sh',
      'dependency-manager.sh',
      'github-manager.sh',
      'binary-manager.sh',
      'config-manager.sh',
      'security-manager.sh',
      'progress-tracker.sh'
    ];

    for (const module of coreModules) {
      const modulePath = path.join(modulesDir, module);
      await this.createShellScript(modulePath, this.getModuleTemplate(module));
    }

    // Create package manager modules
    const packageManagersDir = path.join(modulesDir, 'package-managers');
    const packageManagers = [
      'homebrew.sh',
      'apt.sh',
      'yum.sh'
    ];

    for (const pm of packageManagers) {
      const pmPath = path.join(packageManagersDir, pm);
      await this.createShellScript(pmPath, this.getPackageManagerTemplate(pm));
    }
  }

  async createUtilityFiles() {
    const utilsDir = path.join(this.projectRoot, 'scripts/utils');
    
    const utilityFiles = [
      'common.sh',
      'logger.sh',
      'error-handler.sh',
      'colors.sh',
      'filesystem.sh',
      'system-info.sh',
      'github-api.sh',
      'binary-utils.sh',
      'config-utils.sh',
      'security-utils.sh',
      'progress-utils.sh'
    ];

    for (const util of utilityFiles) {
      const utilPath = path.join(utilsDir, util);
      await this.createShellScript(utilPath, this.getUtilityTemplate(util));
    }
  }

  async createInstallScripts() {
    const installDir = path.join(this.projectRoot, 'scripts/install');
    
    const installScripts = [
      'install.sh',
      'install-options.sh',
      'uninstall.sh',
      'update.sh'
    ];

    for (const script of installScripts) {
      const scriptPath = path.join(installDir, script);
      await this.createShellScript(scriptPath, this.getInstallScriptTemplate(script));
    }
  }

  async ensureDirectoryExists(dirPath) {
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true });
    }
  }

  async createShellScript(filePath, content) {
    fs.writeFileSync(filePath, content, 'utf8');
    
    // Set executable permissions
    const stats = fs.statSync(filePath);
    fs.chmodSync(filePath, stats.mode | parseInt('111', 8));
  }

  getModuleTemplate(moduleName) {
    return `#!/bin/bash
# ${moduleName}
# Generated by ProjectStructureSetup

set -euo pipefail

# Source common utilities
SCRIPT_DIR="$(cd "$(dirname "\${BASH_SOURCE[0]}")" && pwd)"
UTILS_DIR="\${SCRIPT_DIR}/../utils"

# Load common functions
if [[ -f "\${UTILS_DIR}/common.sh" ]]; then
    source "\${UTILS_DIR}/common.sh"
fi

# Module-specific functions will be implemented here
# This is a placeholder file created by the project structure setup

echo "Module ${moduleName} loaded successfully"
`;
  }

  getPackageManagerTemplate(pmName) {
    return `#!/bin/bash
# ${pmName} - Package Manager Module
# Generated by ProjectStructureSetup

set -euo pipefail

# Source common utilities
SCRIPT_DIR="$(cd "$(dirname "\${BASH_SOURCE[0]}")" && pwd)"
UTILS_DIR="\${SCRIPT_DIR}/../../utils"

# Load common functions
if [[ -f "\${UTILS_DIR}/common.sh" ]]; then
    source "\${UTILS_DIR}/common.sh"
fi

# ${pmName} specific functions will be implemented here
# This is a placeholder file created by the project structure setup

echo "Package manager ${pmName} module loaded successfully"
`;
  }

  getUtilityTemplate(utilName) {
    return `#!/bin/bash
# ${utilName} - Utility Functions
# Generated by ProjectStructureSetup

set -euo pipefail

# ${utilName} utility functions will be implemented here
# This is a placeholder file created by the project structure setup

echo "Utility ${utilName} loaded successfully"
`;
  }

  getInstallScriptTemplate(scriptName) {
    if (scriptName === 'install.sh') {
      return `#!/bin/bash
# UX-Kit Remote Installation Script
# Generated by ProjectStructureSetup

set -euo pipefail

# Script configuration
SCRIPT_DIR="$(cd "$(dirname "\${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="\${SCRIPT_DIR}/../.."

# Source common utilities
UTILS_DIR="\${SCRIPT_DIR}/../utils"
if [[ -f "\${UTILS_DIR}/common.sh" ]]; then
    source "\${UTILS_DIR}/common.sh"
fi

# Main installation logic will be implemented here
# This is a placeholder file created by the project structure setup

echo "UX-Kit installation script loaded successfully"
echo "Installation logic will be implemented in subsequent tasks"
`;
    }

    return `#!/bin/bash
# ${scriptName} - UX-Kit ${scriptName.replace('.sh', '').replace('-', ' ')} Script
# Generated by ProjectStructureSetup

set -euo pipefail

# Script configuration
SCRIPT_DIR="$(cd "$(dirname "\${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="\${SCRIPT_DIR}/../.."

# Source common utilities
UTILS_DIR="\${SCRIPT_DIR}/../utils"
if [[ -f "\${UTILS_DIR}/common.sh" ]]; then
    source "\${UTILS_DIR}/common.sh"
fi

# ${scriptName} logic will be implemented here
# This is a placeholder file created by the project structure setup

echo "${scriptName} script loaded successfully"
`;
  }
}

// Run the setup if this script is executed directly
if (require.main === module) {
  const setup = new ProjectStructureSetup();
  setup.setupProjectStructure()
    .then(() => {
      console.log('');
      console.log('Next steps:');
      console.log('   - Run T002: Utility Functions Setup');
      console.log('   - Run T003-T007: Test implementations (can be done in parallel)');
      process.exit(0);
    })
    .catch((error) => {
      console.error('Setup failed:', error);
      process.exit(1);
    });
}

module.exports = ProjectStructureSetup;
