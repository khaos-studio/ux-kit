#!/bin/bash
# File system utilities
# Generated by UtilityFunctionsSetup

set -euo pipefail

# Source common utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [[ -f "${SCRIPT_DIR}/common.sh" ]]; then
    source "${SCRIPT_DIR}/common.sh"
fi

# Ensure directory exists
ensure_directory_exists() {
    local dir="$1"
    
    if [[ ! -d "$dir" ]]; then
        log_info "Creating directory: $dir"
        mkdir -p "$dir"
    fi
}

# Create file with content
create_file_with_content() {
    local file="$1"
    local content="$2"
    local dir
    
    dir=$(dirname "$file")
    ensure_directory_exists "$dir"
    
    log_debug "Creating file: $file"
    echo "$content" > "$file"
}

# Backup file
backup_file() {
    local file="$1"
    local backup_file="${file}.backup.$(date +%Y%m%d_%H%M%S)"
    
    if [[ -f "$file" ]]; then
        log_info "Backing up file: $file -> $backup_file"
        cp "$file" "$backup_file"
        echo "$backup_file"
    else
        log_warn "File does not exist for backup: $file"
        return 1
    fi
}

# Validate path
validate_path() {
    local path="$1"
    
    # Check if path is absolute
    if [[ "$path" != /* ]]; then
        log_error "Path must be absolute: $path"
        return 1
    fi
    
    # Check for dangerous characters
    if [[ "$path" =~ [;&|`$] ]]; then
        log_error "Path contains dangerous characters: $path"
        return 1
    fi
    
    return 0
}

# Safe remove
safe_remove() {
    local path="$1"
    local force="${2:-false}"
    
    if [[ ! -e "$path" ]]; then
        log_warn "Path does not exist: $path"
        return 0
    fi
    
    if [[ "$force" == "true" ]]; then
        log_info "Force removing: $path"
        rm -rf "$path"
    else
        log_info "Removing: $path"
        rm -r "$path"
    fi
}

# Get file size
get_file_size() {
    local file="$1"
    
    if [[ -f "$file" ]]; then
        stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo "0"
    else
        echo "0"
    fi
}

# Get directory size
get_directory_size() {
    local dir="$1"
    
    if [[ -d "$dir" ]]; then
        du -sh "$dir" 2>/dev/null | cut -f1 || echo "0"
    else
        echo "0"
    fi
}

# Check if file is executable
is_executable() {
    local file="$1"
    
    if [[ -f "$file" && -x "$file" ]]; then
        return 0
    else
        return 1
    fi
}

# Make file executable
make_executable() {
    local file="$1"
    
    if [[ -f "$file" ]]; then
        chmod +x "$file"
        log_debug "Made file executable: $file"
    else
        log_error "File does not exist: $file"
        return 1
    fi
}

# Copy file with permissions
copy_file_with_permissions() {
    local source="$1"
    local destination="$2"
    
    if [[ -f "$source" ]]; then
        cp -p "$source" "$destination"
        log_debug "Copied file with permissions: $source -> $destination"
    else
        log_error "Source file does not exist: $source"
        return 1
    fi
}

# Create symlink
create_symlink() {
    local target="$1"
    local link="$2"
    local force="${3:-false}"
    
    if [[ -L "$link" ]]; then
        if [[ "$force" == "true" ]]; then
            rm "$link"
        else
            log_error "Symlink already exists: $link"
            return 1
        fi
    fi
    
    ln -s "$target" "$link"
    log_debug "Created symlink: $link -> $target"
}

# Find files
find_files() {
    local pattern="$1"
    local directory="${2:-.}"
    
    find "$directory" -name "$pattern" -type f 2>/dev/null || true
}

# Find directories
find_directories() {
    local pattern="$1"
    local directory="${2:-.}"
    
    find "$directory" -name "$pattern" -type d 2>/dev/null || true
}

echo "Filesystem utilities loaded successfully"