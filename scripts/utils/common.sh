#!/bin/bash
# Common utility functions
# Generated by UtilityFunctionsSetup

set -euo pipefail

# Get the directory of the current script
get_script_dir() {
    echo "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
}

# Validate input parameters
validate_input() {
    local input="$1"
    local description="$2"
    
    if [[ -z "$input" ]]; then
        log_error "Invalid input: $description cannot be empty"
        return 1
    fi
    
    # Check for dangerous characters
    if [[ "$input" =~ [;&|`$] ]]; then
        log_error "Invalid input: $description contains dangerous characters"
        return 1
    fi
    
    return 0
}

# Sanitize file path
sanitize_path() {
    local path="$1"
    
    # Remove dangerous characters and normalize path
    path=$(echo "$path" | sed "s/[;&|`$]//g")
    path=$(realpath "$path" 2>/dev/null || echo "$path")
    
    echo "$path"
}

# Check if required dependencies are available
check_dependencies() {
    local deps=("$@")
    local missing=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            missing+=("$dep")
        fi
    done
    
    if [[ ${#missing[@]} -gt 0 ]]; then
        log_error "Missing dependencies: ${missing[*]}"
        return 1
    fi
    
    return 0
}

# Check if running as root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        log_warn "Running as root. This may cause permission issues."
        return 0
    fi
    return 1
}

# Get system information
get_system_info() {
    local os=$(uname -s)
    local arch=$(uname -m)
    local hostname=$(hostname)
    
    echo "OS: $os"
    echo "Architecture: $arch"
    echo "Hostname: $hostname"
}

# Create temporary directory
create_temp_dir() {
    local temp_dir=$(mktemp -d)
    echo "$temp_dir"
}

# Cleanup temporary directory
cleanup_temp_dir() {
    local temp_dir="$1"
    if [[ -d "$temp_dir" ]]; then
        rm -rf "$temp_dir"
    fi
}

echo "Common utilities loaded successfully"