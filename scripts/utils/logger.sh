#!/bin/bash
# Logging utilities
# Generated by UtilityFunctionsSetup

set -euo pipefail

# Source common utilities
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [[ -f "${SCRIPT_DIR}/common.sh" ]]; then
    source "${SCRIPT_DIR}/common.sh"
fi

# Log levels
LOG_LEVEL_ERROR=1
LOG_LEVEL_WARN=2
LOG_LEVEL_INFO=3
LOG_LEVEL_DEBUG=4

# Default log level
LOG_LEVEL=${LOG_LEVEL:-$LOG_LEVEL_INFO}

# Get timestamp
get_timestamp() {
    date "+%Y-%m-%d %H:%M:%S"
}

# Log info message
log_info() {
    if [[ $LOG_LEVEL -ge $LOG_LEVEL_INFO ]]; then
        echo -e "$(get_timestamp) [INFO] $*" >&2
    fi
}

# Log error message
log_error() {
    if [[ $LOG_LEVEL -ge $LOG_LEVEL_ERROR ]]; then
        echo -e "$(get_timestamp) [ERROR] $*" >&2
    fi
}

# Log warning message
log_warn() {
    if [[ $LOG_LEVEL -ge $LOG_LEVEL_WARN ]]; then
        echo -e "$(get_timestamp) [WARN] $*" >&2
    fi
}

# Log debug message
log_debug() {
    if [[ $LOG_LEVEL -ge $LOG_LEVEL_DEBUG ]]; then
        echo -e "$(get_timestamp) [DEBUG] $*" >&2
    fi
}

# Set log level
set_log_level() {
    case "$1" in
        "error") LOG_LEVEL=$LOG_LEVEL_ERROR ;;
        "warn") LOG_LEVEL=$LOG_LEVEL_WARN ;;
        "info") LOG_LEVEL=$LOG_LEVEL_INFO ;;
        "debug") LOG_LEVEL=$LOG_LEVEL_DEBUG ;;
        *) log_error "Invalid log level: $1" ; return 1 ;;
    esac
}

echo "Logger utilities loaded successfully"